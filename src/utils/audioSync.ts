// Sistema nativo de sincroniza√ß√£o de √°udios
import { Audio } from '@/data/siteData';
import { getPortfolioAudios, isAudioFileAvailable } from './publicAudioManager';

// Fun√ß√£o para buscar arquivos do servidor
const fetchAudioFilesFromServer = async (): Promise<string[]> => {
  try {
    const response = await fetch('/api/audio-files');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data.files ? data.files.map((file: any) => file.name) : [];
  } catch (error) {
    console.error('Erro ao buscar arquivos do servidor:', error);
    return [];
  }
};

// Fun√ß√£o para formatar t√≠tulo do arquivo
const formatAudioTitle = (fileName: string): string => {
  return fileName
    .replace(/\.[^/.]+$/, '') // Remove extens√£o
    .replace(/[-_]/g, ' ') // Substitui h√≠fens por espa√ßos
    .replace(/\b\w/g, l => l.toUpperCase()) // Capitaliza primeira letra
    .trim();
};

// Fun√ß√£o para criar √°udio a partir do nome do arquivo
const createAudioFromFileName = (fileName: string): Audio => {
  return {
    id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
    title: formatAudioTitle(fileName),
    description: `Locu√ß√£o profissional - ${formatAudioTitle(fileName)}`,
    fileName: fileName,
    order_position: Date.now() // Alterado de orderPosition para order_position
  };
};

// Fun√ß√£o para limpar √°udios corrompidos
export const cleanCorruptedAudios = async (): Promise<Audio[]> => {
  try {
    console.log('üßπ Iniciando limpeza de √°udios corrompidos...');
    
    // Buscar arquivos do servidor
    const serverFiles = await fetchAudioFilesFromServer();
    console.log('üìÅ Arquivos v√°lidos no servidor:', serverFiles);
    
    // Buscar √°udios do localStorage
    const storedAudios = localStorage.getItem('siteAudios');
    let audios: Audio[] = storedAudios ? JSON.parse(storedAudios) : [];
    console.log('üì¶ √Åudios no localStorage antes da limpeza:', audios.length);
    
    // Filtrar apenas √°udios que existem no servidor
    const validAudios = audios.filter(audio => 
      audio.fileName && serverFiles.includes(audio.fileName)
    );
    console.log('‚úÖ √Åudios v√°lidos ap√≥s limpeza:', validAudios.length);
    
    // Criar √°udios para arquivos que existem mas n√£o est√£o cadastrados
    const existingFileNames = validAudios.map(audio => audio.fileName);
    const missingFiles = serverFiles.filter(fileName => !existingFileNames.includes(fileName));
    console.log('üÜï Arquivos n√£o cadastrados:', missingFiles);
    
    const newAudios = missingFiles.map(fileName => createAudioFromFileName(fileName));
    
    // Combinar √°udios v√°lidos com novos
    const cleanedAudios = [...validAudios, ...newAudios];
    
    // Ordenar por data de cria√ß√£o (mais recentes primeiro)
    cleanedAudios.sort((a, b) => (b.order_position || 0) - (a.order_position || 0)); // Alterado de orderPosition para order_position
    
    // Salvar no localStorage
    localStorage.setItem('siteAudios', JSON.stringify(cleanedAudios));
    console.log('üíæ √Åudios limpos salvos no localStorage:', cleanedAudios.length);
    
    return cleanedAudios;
  } catch (error) {
    console.error('Erro ao limpar √°udios corrompidos:', error);
    return [];
  }
};

// Fun√ß√£o principal para sincronizar √°udios - sistema nativo serverless
export const syncAudiosNative = async (): Promise<Audio[]> => {
  try {
    console.log('üîÑ Iniciando sincroniza√ß√£o de √°udios...');
    
    // Buscar arquivos do servidor
    const serverFiles = await fetchAudioFilesFromServer();
    console.log('üìÅ Arquivos no servidor:', serverFiles);
    
    // Buscar √°udios cadastrados no localStorage
    const storedAudios = localStorage.getItem('siteAudios');
    let audios: Audio[] = storedAudios ? JSON.parse(storedAudios) : [];
    console.log('üì¶ √Åudios no localStorage:', audios.length);

    // Se n√£o h√° √°udios no localStorage, usar √°udios do portf√≥lio padr√£o
    if (audios.length === 0) {
      const portfolioAudios = getPortfolioAudios();
      audios = portfolioAudios.slice(0, 12); // Limitar a 12 √°udios iniciais
      localStorage.setItem('siteAudios', JSON.stringify(audios));
      console.log('‚úÖ √Åudios padr√£o carregados:', audios.length);
      return audios;
    }

    // Filtrar apenas √°udios que ainda existem na lista de arquivos dispon√≠veis
    const validAudios = audios.filter(audio => 
      audio.fileName && serverFiles.includes(audio.fileName)
    );
    console.log('‚úÖ √Åudios v√°lidos:', validAudios.length);
    
    // Detectar novos arquivos
    const existingFileNames = validAudios.map(audio => audio.fileName);
    const newFiles = serverFiles.filter(fileName => !existingFileNames.includes(fileName));
    console.log('üÜï Novos arquivos encontrados:', newFiles);

    // Criar objetos Audio para novos arquivos
    const newAudios: Audio[] = newFiles.map(fileName => createAudioFromFileName(fileName));
    
    // Combinar √°udios existentes com novos
    const updatedAudios = [...validAudios, ...newAudios];
    
    // Ordenar por ordem de cria√ß√£o (mais recentes primeiro)
    updatedAudios.sort((a, b) => (b.order_position || 0) - (a.order_position || 0)); // Alterado de orderPosition para order_position
    
    // Salvar no localStorage
    localStorage.setItem('siteAudios', JSON.stringify(updatedAudios));
    console.log('üéµ Total de √°udios ap√≥s sincroniza√ß√£o:', updatedAudios.length);
    
    return updatedAudios;
  } catch (error) {
    console.error('Erro na sincroniza√ß√£o de √°udios:', error);
    return [];
  }
};

// Fun√ß√£o para for√ßar atualiza√ß√£o completa
export const forceUpdateAudios = async (): Promise<Audio[]> => {
  try {
    console.log('üîÑ For√ßando atualiza√ß√£o completa de √°udios...');
    
    // Limpar localStorage
    localStorage.removeItem('siteAudios');
    console.log('üóëÔ∏è localStorage limpo');
    
    // Recarregar do zero
    const updatedAudios = await syncAudiosNative();
    console.log('‚úÖ Atualiza√ß√£o completa conclu√≠da:', updatedAudios.length);
    
    return updatedAudios;
  } catch (error) {
    console.error('Erro na atualiza√ß√£o for√ßada:', error);
    return [];
  }
};

// Fun√ß√£o para obter √°udios para o portf√≥lio com limite
export const getAudiosForPortfolio = (limit: number = 9): Audio[] => {
  try {
    const storedAudios = localStorage.getItem('siteAudios');
    let audios: Audio[] = [];

    if (storedAudios) {
      audios = JSON.parse(storedAudios);
    } else {
      // Se n√£o h√° √°udios no localStorage, usar √°udios padr√£o
      const portfolioAudios = getPortfolioAudios();
      audios = portfolioAudios.slice(0, 12);
      localStorage.setItem('siteAudios', JSON.stringify(audios));
    }

    // Filtrar apenas √°udios v√°lidos e aplicar limite
    return audios
      .filter(audio => audio.fileName && isAudioFileAvailable(audio.fileName))
      .slice(0, limit);
  } catch (error) {
    console.error('Erro ao obter √°udios do portf√≥lio:', error);
    // Fallback para √°udios padr√£o
    const portfolioAudios = getPortfolioAudios();
    return portfolioAudios.slice(0, limit);
  }
};

// Fun√ß√£o para obter contagem total de √°udios
export const getTotalAudiosCount = (): number => {
  try {
    const storedAudios = localStorage.getItem('siteAudios');
    if (storedAudios) {
      const audios: Audio[] = JSON.parse(storedAudios);
      return audios.filter(audio => 
        audio.fileName && isAudioFileAvailable(audio.fileName)
      ).length;
    }
    
    // Se n√£o h√° √°udios no localStorage, usar contagem padr√£o
    return Math.min(getPortfolioAudios().length, 12);
  } catch (error) {
    console.error('Erro ao obter contagem de √°udios:', error);
    return 12; // Fallback
  }
};

// Fun√ß√£o para adicionar novo √°udio (para uso do admin)
export const addAudioToPortfolio = (audio: Audio): void => {
  try {
    const storedAudios = localStorage.getItem('siteAudios');
    const audios: Audio[] = storedAudios ? JSON.parse(storedAudios) : [];
    
    // Verificar se o √°udio j√° existe
    const existingIndex = audios.findIndex(a => a.id === audio.id);
    
    if (existingIndex >= 0) {
      // Atualizar √°udio existente
      audios[existingIndex] = audio;
    } else {
      // Adicionar novo √°udio
      audios.push(audio);
    }
    
    localStorage.setItem('siteAudios', JSON.stringify(audios));
  } catch (error) {
    console.error('Erro ao adicionar √°udio ao portf√≥lio:', error);
  }
};

// Fun√ß√£o para remover √°udio do portf√≥lio
export const removeAudioFromPortfolio = (audioId: string): void => {
  try {
    const storedAudios = localStorage.getItem('siteAudios');
    const audios: Audio[] = storedAudios ? JSON.parse(storedAudios) : [];
    
    const filteredAudios = audios.filter(audio => audio.id !== audioId);
    localStorage.setItem('siteAudios', JSON.stringify(filteredAudios));
  } catch (error) {
    console.error('Erro ao remover √°udio do portf√≥lio:', error);
  }
};

// Fun√ß√£o para configurar atualiza√ß√£o autom√°tica
export const setupAutoUpdate = (callback: (audios: Audio[]) => void, interval: number = 30000) => {
  console.log('‚è∞ Configurando atualiza√ß√£o autom√°tica a cada', interval / 1000, 'segundos');
  
  const updateInterval = setInterval(async () => {
    try {
      const updatedAudios = await syncAudiosNative();
      callback(updatedAudios);
    } catch (error) {
      console.error('Erro na atualiza√ß√£o autom√°tica:', error);
    }
  }, interval);
  
  return () => clearInterval(updateInterval);
};